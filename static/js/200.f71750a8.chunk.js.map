{"version":3,"file":"static/js/200.f71750a8.chunk.js","mappings":"oQAqCA,EAnCkB,SAAC,GAAoB,IAAlBA,EAAiB,EAAjBA,WAGnB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAYA,OACE,+BACE,kBAAMC,SARW,SAAAC,GACnBA,EAAEC,iBACFN,EAAWE,GACXC,EAAgB,GACjB,EAIG,WACE,mBAAQI,KAAK,SAASC,SAA2B,KAAjBN,EAAhC,2BAIA,kBACEO,MAAOP,EACPQ,SAnBa,SAAAL,GACnBF,EAAgBE,EAAEM,OAAOF,MAAMG,OAChC,EAkBOL,KAAK,OACLM,aAAa,MACbC,WAAS,EACTC,YAAY,qBAKrB,E,UC+BD,EAxDe,WAEb,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCnB,EAAAA,EAAAA,UAAS,IAA/C,eAAOoB,EAAP,KAAoBC,EAApB,KACA,GAA0BrB,EAAAA,EAAAA,UAAS,MAAnC,eAAOsB,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAOP,EAAaQ,IAAI,SADhB,wCAId,8GAGuBC,EAAAA,EAAAA,IAAeF,GAHtC,OAGUG,EAHV,OAIIP,EAAeO,GAJnB,gDAMIL,EAAS,EAAD,IANZ,yBAQIM,QAAQC,IAAI,kBARhB,6EAJc,sBAETL,GAFS,mCAgBdM,EAGD,GAAE,CAACb,IAOJ,OACE,gCACGI,IAAS,SAAC,KAAD,CAAUU,GAAG,UAAUC,SAAO,KACxC,SAAC,EAAD,CAAWlC,WARE,SAAAE,GACfkB,EAAgB,CAAEe,MAAOjC,GAE1B,IAOImB,IACC,wBACGA,EAAYe,KAAI,SAAAC,GAAU,aACzB,yBACE,SAAC,KAAD,CACEJ,GAAE,kBAAaI,EAAWC,IAC1BC,MAAO,CAAEC,KAAMxB,GAFjB,mBAIGqB,EAAWI,aAJd,QAIuBJ,EAAWK,iBAL3BL,EAAWC,GADK,QAcpC,C,4MCnDM,SAAeK,IAAtB,4CAAO,OAAP,oBAAO,sGACkBC,IAAAA,IAAU,qBAD5B,uBACGf,EADH,EACGA,KADH,kBAEEA,EAAKgB,SAFP,kEAKA,SAAejB,EAAtB,+CAAO,OAAP,oBAAO,WAA8B1B,GAA9B,yFACkB0C,IAAAA,IAAA,+BAAkC1C,IADpD,uBACG2B,EADH,EACGA,KADH,kBAEEA,EAAKgB,SAFP,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBH,IAAAA,IAAA,iBAAoBG,IADtC,uBACGlB,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAA6BD,GAA7B,yFACkBH,IAAAA,IAAA,iBAAoBG,EAApB,aADlB,uBACGlB,EADH,EACGA,KADH,kBAEEA,EAAKoB,MAFP,kEAMA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA0BH,GAA1B,yFACkBH,IAAAA,IAAA,iBAAoBG,EAApB,aADlB,uBACGlB,EADH,EACGA,KADH,kBAEEA,EAAKgB,SAFP,kEAhCPD,IAAAA,SAAAA,QAAyB,+BAEzBA,IAAAA,SAAAA,OAAwB,CACtBO,QAJc,mCAKdC,SAAU,QAEVC,KAAM,EACNC,SAAU,G","sources":["Pages/Movies/Searchbar.jsx","Pages/Movies/Movies.jsx","Services/movie_api.js"],"sourcesContent":["import { useState } from 'react';\n\nconst Searchbar = ({ onOnSubmit }) => {\n  // const location = useLocation();\n\n  const [queryMessage, setQueryMessage] = useState('');\n\n  const handleChange = e => {\n    setQueryMessage(e.target.value.trim());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onOnSubmit(queryMessage);\n    setQueryMessage('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\" disabled={queryMessage === ''}>\n          üîç\n        </button>\n\n        <input\n          value={queryMessage}\n          onChange={handleChange}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search films\"\n        />\n      </form>\n    </>\n  );\n};\n\nexport default Searchbar;\n","import {\n  Navigate,\n  NavLink,\n  useLocation,\n  useSearchParams,\n} from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport Searchbar from './Searchbar';\nimport { getSearchMovie } from '../../Services/movie_api';\n\nconst Movies = () => {\n  // const navigate = useNavigate();\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const film = searchParams.get('query');\n    if (!film) return;\n\n    async function getSearch() {\n      // setLoading(true);\n      try {\n        const data = await getSearchMovie(film);\n        setSearchFilms(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        console.log('finally Movies');\n        // setLoading(false);\n      }\n    }\n    getSearch();\n\n    //\n  }, [searchParams]);\n\n  const onHandle = queryMessage => {\n    setSearchParams({ query: queryMessage });\n    // setQueryMessage(searchParams.get('query'));\n  };\n\n  return (\n    <>\n      {error && <Navigate to=\"/movies\" replace />}\n      <Searchbar onOnSubmit={onHandle} />\n\n      {searchFilms && (\n        <ul>\n          {searchFilms.map(searchFilm => (\n            <li key={searchFilm.id}>\n              <NavLink\n                to={`/movies/${searchFilm.id}`}\n                state={{ from: location }} // –¥–ª—è goBackLink –≤ MovieDetails\n              >\n                {searchFilm.title ?? searchFilm.original_name}\n              </NavLink>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '56df3cdaf4656bc2a0c7d7aaff77ded0';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n  // include_adult: 'false',\n  page: 1,\n  per_page: 12,\n};\n\nexport async function getPopularFilmsHome() {\n  const { data } = await axios.get('/trending/all/day');\n  return data.results;\n}\n\nexport async function getSearchMovie(queryMessage) {\n  const { data } = await axios.get(`/search/movie?&query=${queryMessage}`);\n  return data.results;\n}\n\nexport async function getMovieDetiasl(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  // console.log(data);\n  return data;\n}\n\nexport async function getActorsCast(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return data.cast;\n  // https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n}\n\nexport async function getReviews(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return data.results;\n  // https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1\n}\n\n// –ö–ª—é—á API(v3 auth)\n// 56df3cdaf4656bc2a0c7d7aaff77ded0\n\n// –ü—Ä–∏–º–µ—Ä API - –∑–∞–ø—Ä–æ—Å–∞\n// https://api.themoviedb.org/3/movie/550?api_key=56df3cdaf4656bc2a0c7d7aaff77ded0\n\n// –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ API (v4 auth)\n// eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1NmRmM2NkYWY0NjU2YmMyYTBjN2Q3YWFmZjc3ZGVkMCIsInN1YiI6IjYyZWMxYzkwYjNlNjI3MDA2MTYzZDdjNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.rQDv3wcx0DLSGrljquyK1IugZWdu16n-_CZhTiG7sZQ\n"],"names":["onOnSubmit","useState","queryMessage","setQueryMessage","onSubmit","e","preventDefault","type","disabled","value","onChange","target","trim","autoComplete","autoFocus","placeholder","location","useLocation","useSearchParams","searchParams","setSearchParams","searchFilms","setSearchFilms","error","setError","useEffect","film","get","getSearchMovie","data","console","log","getSearch","to","replace","query","map","searchFilm","id","state","from","title","original_name","getPopularFilmsHome","axios","results","getMovieDetiasl","movieId","getActorsCast","cast","getReviews","api_key","language","page","per_page"],"sourceRoot":""}